if (typeof PTCalendar === "undefined") {
PTCalendar = function (firstDayOfWeek, dateStr, onSelected, onClose) {
 this.calType = calendarType; this.activeDiv = null; this.currentDateEl = null; this.timeout = null; this.onSelected = onSelected || null; this.onClose = onClose || null; this.hidden = false; this.minYear = 1970; this.maxYear = 2050; this.dateFormat = null; this.isPopup = true; this.weekNumbers = true; this.firstDayOfWeek = typeof firstDayOfWeek == "number" ? firstDayOfWeek : 0; this.ar_days = null; this.hiliteToday = true; this.multiple = null; this.showsOtherMonths = false;  this.table = null; this.Headertable = null; this.element = null; this.tbody = null; this.firstdayname = null;  this.monthsCombo = null; this.yearsCombo = null; this.hilitedMonth = null; this.activeMonth = null; this.hilitedYear = null; this.activeYear = null;  this.dateClicked = false; this.firstDayOfMonth=0; this.CellSel = null; this.TodayCell = null; this.datePromptName = null;};PTCalendar._C = null;PTCalendar.is_ie = ( (/msie/i.test(navigator.userAgent) || /trident/i.test(navigator.userAgent) ) &&
 !/opera/i.test(navigator.userAgent) );PTCalendar.is_firefox = /firefox/i.test(navigator.userAgent);PTCalendar.is_opera = /opera/i.test(navigator.userAgent);PTCalendar.is_khtml = /Konqueror|Safari|KHTML/i.test(navigator.userAgent);PTCalendar.getAbsolutePos = function(el) {
 var SL = 0, ST = 0; var is_div = /^div$/i.test(el.tagName); if (is_div && el.scrollLeft)
 SL = el.scrollLeft; if (is_div && el.scrollTop)
 ST = el.scrollTop; var r = { x: el.offsetLeft - SL, y: el.offsetTop - ST }; if (el.offsetParent) {
 var tmp = this.getAbsolutePos(el.offsetParent); r.x += tmp.x; r.y += tmp.y; }
 return r;};PTCalendar.removeClass = function(el, className) {
 if (!(el && el.className)) {
 return; }
 var cls = el.className.split(" "); var ar = new Array(); for (var i = cls.length; i > 0;) {
 if (cls[--i] != className) {
 ar[ar.length] = cls[i]; }
 }
 el.className = ar.join(" ");};PTCalendar.addClass = function(el, className) {
 PTCalendar.removeClass(el, className); el.className += " " + className;};PTCalendar.getElement = function(ev) {
 ev || (ev = window.event); var f = (ev.currentTarget) ? ev.currentTarget : ev.srcElement; while (f.nodeType != 1 || /^div$/i.test(f.tagName))
 f = f.parentNode; return f;};PTCalendar.getTargetElement = function(ev) {
 var f = PTCalendar.is_ie ? window.event.srcElement : ev.target; while (f.nodeType != 1)
 f = f.parentNode; return f;};PTCalendar.stopEvent = function(ev) {
 ev || (ev = window.event); if (PTCalendar.is_ie) {
 ev.cancelBubble = true; ev.returnValue = false; }
 ev.preventDefault(); ev.stopPropagation(); return false;};PTCalendar.addEvent = function(el, evname, func) {
 if (el.addEventListener) { 
 el.addEventListener(evname, func, true); } else {
 el["on" + evname] = func; }
};PTCalendar.removeEvent = function(el, evname, func) {
 if (el.removeEventListener) { 
 el.removeEventListener(evname, func, true); } else {
 el["on" + evname] = null; }
};PTCalendar.createElement = function(type, parent) {
 var el = null; if (document.createElementNS) {
 
 
 el = document.createElementNS("http://www.w3.org/1999/xhtml", type); } else {
 el = document.createElement(type); }
 if (typeof parent != "undefined") {
 parent.appendChild(el); }

 el.style.zIndex = 350; return el;};PTCalendar._add_evs = function(el) {
 with (PTCalendar) {
 addEvent(el, "click", dayMouseClick); addEvent(el, "dblclick", dayMouseDblClick); }
};PTCalendar.dayMouseClick = function(ev) {
 var cal = _PS_popupCalendar; if(cal!= null)
 {
 if(PTCalendar.getElement(ev).disabled == true)
 return; cal.dateClicked=true; PTCalendar.cellClick(PTCalendar.getElement(ev), ev || window.event); if ((PTCalendar.is_ie) && (typeof document.selection != "undefined")) document.selection.empty(); }
};PTCalendar.dayMouseDblClick = function(ev) {
 var cal = _PS_popupCalendar; cal.dayMouseClick(ev);};PTCalendar.closeWindow = function() {
 dateBoxOpen = false; if (isFModeLayout()) 
 closeLastModal(); var cal = window._PS_popupCalendar; if(cal!=null)
 cal.callCloseHandler();};PTCalendar.HandleInnercell = function() {
 var cal = _PS_popupCalendar; if(cal!=null)
 {
 var cell1 = cal.TodayCell; cal.dateClicked=true; PTCalendar.cellClick(cell1, cell1 || window.event); }
};PTCalendar.trapfocus = function(e, obj) {
 var key = window.event ? window.event.keyCode : e.keyCode; var shiftkey = window.event ? window.event.shiftKey : e.shiftKey; if(key == 9 && !shiftkey){
 var calclosehdr = document.getElementById("CalCloseHeader"); calclosehdr.children[0].getElementsByTagName('a')[0].focus(); e.preventDefault(); return ; }
};PTCalendar.previousMonth = function() {
 prevMonth(0);};PTCalendar.nextMonth = function() {
 nextMonth(0)
};PTCalendar.previousYear = function() {
 var cal = window._PS_popupCalendar; if(cal.yearsCombo.selectedIndex > 0){
 cal.yearsCombo.selectedIndex--; cal.calType == "H" ? selectMonth(cal.month,-1) : selectMonth(cal.date.getMonth(),-1); }
};PTCalendar.nextYear = function() {
 var cal = window._PS_popupCalendar; if(cal.yearsCombo.selectedIndex < cal.yearsCombo.length-1){
 cal.yearsCombo.selectedIndex++; cal.calType == "H" ? selectMonth(cal.month,1) : selectMonth(cal.date.getMonth(),1); }
};PTCalendar.currentDate = function() {
 var cal = window._PS_popupCalendar; var oldYear; var oldComboSelectIndex = cal.yearsCombo.selectedIndex;  if(cal.calType == "H")
 {
 oldYear = cal.year; cal.setDate(new window.HijriDate()); cal.monthsCombo.selectedIndex = cal.month; cal.yearsCombo.selectedIndex = oldComboSelectIndex + cal.year - oldYear; selectMonth(cal.month,0); }
 else
 {
 oldYear = cal.date.getFullYear(); cal.setDate(new Date()); cal.monthsCombo.selectedIndex = cal.date.getMonth(); cal.yearsCombo.selectedIndex = oldComboSelectIndex + cal.date.getFullYear() - oldYear; selectMonth(cal.date.getMonth(),0); }
};PTCalendar.firstDayOfMonth = function() {
 var cal = window._PS_popupCalendar; var date = cal.date; cal.calType == "H" ? date.day = 1 : date.setDate(1); cal.setDate(date); cal.dateClicked = false; cal.callHandler();};PTCalendar.lastDayOfMonth = function() {
 var cal = window._PS_popupCalendar; var date = cal.date; cal.calType == "H" ? date.day = date.daysOfMonth() : date.setDate(date.getMonthDays(date.Month)); cal.setDate(date); cal.dateClicked = false; cal.callHandler();};PTCalendar.toDay = function() {
var date = new Date();callHandler();};PTCalendar.MonthChanged = function() {
 var cal = window._PS_popupCalendar; var mon = cal.monthsCombo.selectedIndex; cal.dateClicked = false; selectMonth(mon);};PTCalendar.YearChanged = function() {
 var cal = window._PS_popupCalendar; var date = null; cal.dateClicked = false; if(cal.calType =="H")
 {
 date = new window.HijriDate(cal.date.year,cal.date.month,cal.date.day); date.year =cal.yearsCombo.selectedIndex+1321; }
 else
 {
 date = new Date(cal.date); var nYearIndex = cal.yearsCombo.selectedIndex+1900; date.PT_setFullYear(nYearIndex); }
 cal.callHandler(); cal.setDate(date);};PTCalendar.SelectToday = function() {
 var date = null; var date1 = null; var cal = window._PS_popupCalendar; cal.dateClicked=true; if(cal.calType =="H")
 {
 var Hijridate = new window.HijriDate(); date = new Date(Hijridate.year,Hijridate.month,Hijridate.day); date1 = date; }
 else
 date = new Date();  cal.setDate(date); if(cal.calType =="H")
 cal.date = date1; cal.callHandler(); cal.callCloseHandler();  if (pm)
 pm.updateEventAfterDatePrompt(cal.datePromptName);};PTCalendar.cellClick = function(el, ev) {
 var closing = false; var newdate = false; var date = null; var cal = el.PTCalendar; if (typeof el.navtype == "undefined") {
 if (cal.currentDateEl) {
 var cell = cal.CellSel; cell.background=""; var bToday = false; var TodayDate; if(cal.calType == "H")
 {
 var todate = new window.HijriDate(); TodayDate = todate.day; if(todate.day == el.calday && todate.month == el.calMonth && todate.year == el.calYear)
 bToday = true; }
 else
 {
 var todate = new Date(); TodayDate = todate.getDate(); if(todate.getDate() == el.calday && todate.getMonth() == el.calMonth && todate.getFullYear() == el.calYear)
 {
 bToday = true; }
 } 
 
 cell.style.backgroundRepeat = "no-repeat";   if(cal.CellSel == cal.TodayCell)
 {
 cell.style.background = "url('"+loadedImages[1].src+"')"; cell.style.backgroundRepeat = "no-repeat";  cell.innerHTML ="<a style='font-weight:bold; text-decoration:none;color:black;width:19;height:19;padding: 1px 1px 1px 2px;'>"+TodayDate+"</a>"; }
 else
 {
 cell.style.background = ""; cell.style.fontWeight ="normal"; }
 el.style.background = "url('"+loadedImages[2].src+"')"; el.style.backgroundRepeat = "no-repeat"; el.style.fontWeight ="normal"; if(bToday == true)
 {
 if( PTCalendar.is_ie == false)
 {
 el.style.background = "url('"+loadedImages[1].src+"')"; el.style.textAlign = 'left'; el.style.backgroundRepeat = "no-repeat"; if(el.calday<10)
 el.innerHTML ="<a style='font-weight:bold;background:url("+loadedImages[2].src+"); text-decoration:none;color:black;width:19;height:19;padding: 1px 5px;'>"+el.calday+"</a>"; else
 el.innerHTML ="<a style='font-weight:bold;background:url("+loadedImages[2].src+"); text-decoration:none;color:black;width:19;height:19;padding: 1px 1px 1px 2px;'>"+el.calday+"</a>"; }
 else
 el.innerHTML ="<a style='font-weight:bold;background:url("+loadedImages[1].src+"); repeat-x 100% 100%;text-align: center; text-decoration:none;color:black;width:19;height:19;'>"+el.calday+"</a>"; }
 else
 {
 el.style.fontWeight ="Bold"; el.style.background = "url('"+loadedImages[2].src+"')"; }
 
 cal.CellSel = el; PTCalendar.removeClass(cal.currentDateEl, "PT_CALselected"); cal.currentDateEl.firstChild.setAttribute("tabindex", -1); PTCalendar.addClass(el, "PT_CALselected"); cal.CellSel.firstChild.setAttribute("tabindex", 0); closing = (cal.currentDateEl == el); if (!closing) {
 cal.currentDateEl = el; }
 }
 if(cal.calType == "H")
 {
 cal.date = new Date(el.calYear,el.calMonth,el.calday); }
 
 cal.date.setDateOnly(el.calday,el.calMonth,el.calYear); cal.day = el.calday; cal.month = el.calMonth; cal.year = el.calYear; newdate =true; date = cal.date; }
 if (newdate) {
 cal.dateClicked=true; ev && cal.callHandler(); }
 ev && cal.callCloseHandler();  if (pm)
 pm.updateEventAfterDatePrompt(cal.datePromptName);};PTCalendar.prototype.create = function (_par) {
 var parent = null; if (! _par) {
 
 
 parent = document.getElementsByTagName("body")[0]; this.isPopup = true; } else {
 parent = _par; this.isPopup = false; }

 var table1 = PTCalendar.createElement("table"); this.Headertable = table1; table1.setAttribute("id","tailCalendar");  table1.setAttribute("role", "presentation"); table1.cellSpacing = 0; table1.cellPadding = 0; table1.style.fontSize = "9pt"; table1.style.marginTop = "10px"; table1.style.marginBottom = "10px"; table1.align = "center"; table1.PTCalendar = this; var thead1 = PTCalendar.createElement("thead", table1); var cell = null; var row = null; row = PTCalendar.createElement("tr", thead1); row.style.backgroundColor = "white";  cell = PTCalendar.createElement("td", row);  cell.style.textAlign = 'left'; cell.style.width = "4px"; cell.style.height = "2px"; cell.PTCalendar = cal;  var prevMonthLink = document.createElement("a");  if (prevMonthLink) {
 prevMonthLink.setAttribute("id", 'prevmonth'); prevMonthLink.setAttribute("href",'javascript:PTCalendar.previousMonth();'); prevMonthLink.setAttribute("role", 'button'); prevMonthLink.setAttribute("aria-controls", 'PTMonth'); }

 var prevMonth = PTCalendar.createElement("img"); prevMonth.src = loadedImages[3].src; prevMonth.alt = 'Previous Month'; prevMonth.title= prevMonth.alt; if (prevMonthLink) {
 prevMonthLink.appendChild(prevMonth); cell.appendChild(prevMonthLink); }

 var LeftSpaceCell = PTCalendar.createElement("td", row); LeftSpaceCell.innerHTML = "&nbsp;&nbsp;"; cell = PTCalendar.createElement("td", row); var cellLink = PTCalendar.createElement("td", row); cellLink.align = "center"; cellLink.valign = "Top"; var HyperElem = document.createElement("a");  HyperElem.setAttribute("id", 'curdate'); HyperElem.setAttribute("href",'Javascript:PTCalendar.SelectToday()'); HyperElem.className = "PSHYPERLINK";  var strCurrentDate = 'Current Date'; HyperElem.appendChild(document.createTextNode(strCurrentDate)); cellLink.appendChild(HyperElem); var RightSpaceCell = PTCalendar.createElement("td", row); RightSpaceCell.innerHTML = "&nbsp;&nbsp;"; cell = PTCalendar.createElement("td", row); var nextMonthLink = document.createElement("a"); if (nextMonthLink) {
 nextMonthLink.setAttribute("id", 'nextmonth'); nextMonthLink.setAttribute("href",'javascript:PTCalendar.nextMonth();'); nextMonthLink.setAttribute("onkeydown",'javascript:PTCalendar.trapfocus(event,this);'); nextMonthLink.setAttribute("role", 'button'); nextMonthLink.setAttribute("aria-controls", 'PTMonth'); }

 var NextMonth = PTCalendar.createElement("img"); NextMonth.src = loadedImages[4].src; NextMonth.alt = 'Next Month'; NextMonth.title = NextMonth.alt; if (nextMonthLink) {
 nextMonthLink.appendChild(NextMonth); cell.appendChild(nextMonthLink); }
 
 cell.calendar = cal; cell = PTCalendar.createElement("tr", row);  var table = PTCalendar.createElement("table"); this.table = table; table.setAttribute("id","bodyCalendar");  table.setAttribute("summary", "Calendar table. Hitting ENTER key on a date will select the date and close the calendar."); table.cellSpacing = 0; table.cellPadding = 0; table.style.fontSize = "9pt"; table.PTCalendar = this; table.dir = 'ltr'; var div = PTCalendar.createElement("div"); this.element = div; div.setAttribute("id","fullCalendar");   div.style.borderTop = "1px"; div.style.borderBottom = "1px"; div.style.borderLeft = "1px"; div.style.borderRight = "1px"; div.style.borderStyle ="solid"; div.style.borderColor ="#666666"; div.style.backgroundColor = "white"; div.style.boxShadow = "0px 0px 5px #000000"; div.style.MozBoxShadow = "0px 0px 5px #000000"; div.style.WebkitBoxShadow = "0px 0px 5px #000000"; div.style.position="absolute"; div.setAttribute("role", "dialog"); div.setAttribute("aria-labelledby", "clndrtitle"); if (this.isPopup) {
 div.style.position = "absolute"; div.style.display = "none"; }
 

 var table2 = PTCalendar.createElement("table"); table2.setAttribute("id","headCalendar");  table2.setAttribute("role", "presentation"); table2.cellSpacing = 0; table2.cellPadding = 0; table2.style.fontSize = "9pt"; table2.dir = 'ltr'; var thead2 = PTCalendar.createElement("thead", table2); var cell2 = null;  var row = null; row = PTCalendar.createElement("tr", thead2); row.style.backgroundColor = "white";  var isTangSS = ((typeof(ptStyleSheet) == "undefined") || (ptStyleSheet.indexOf("TANGERINE") != -1)) ? true : false; var strHeader; var clndrTitle = "";  if(isTangSS || isFModeLayout())
 clndrTitle = 'Calendar'; if(table2.dir == 'ltr')
 {
 strHeader = "<div" + pt_calHeadstyle + "style='width: 195px;padding: 5px 5px 5px 20px;height: 20px;'><span role='heading' id='clndrtitle' aria-level='1' style='float:left'>" + clndrTitle + "</span>"; strHeader += "<a href='javascript:PTCalendar.closeWindow();' role='button' id='PTClose' title='Close' style='float:right;padding-right:4px;padding-top:2px;'>"; strHeader += "<img src="+ loadedImages[0].src +" alt='Close' height='16' width='16' border='0'/></a></div>";  }
 else
 {
 strHeader = "<div" + pt_calHeadstyle + "style='width: 195px;padding: 5px 20px 5px 5px;height: 20px;'><span role='heading' id='clndrtitle' aria-level='1'>" + clndrTitle + "</span>"; strHeader += "<a href='javascript:PTCalendar.closeWindow();' role='button' id='PTClose' title='Close' style='padding-left:4px;padding-top:2px;float:left;'>"; strHeader += "<img src="+ loadedImages[0].src +" alt='Close' height='16' width='16' border='0' /></a></div>"; }

 if(bWSRP)
 {
 if (browserInfoObj2.isIE)
 strHeader += "<div id='liveMonth' aria-live='polite' style='height: 1px; width: 1px; position: absolute; left: 0; top: -999px; overflow: hidden; z-index:350;'></div>"; strHeader += "<h2 style='height: 1px; left: 0; overflow: hidden; position: absolute; top: -999px; width: 1px; z-index:350;'>"; } 
 else
 {
 if (browserInfoObj2.isIE)
 strHeader += "<div id='liveMonth' aria-live='polite' class='psaccesshidden' style='z-index:350;'></div>"; strHeader += "<h2 class='psaccesshidden' style='z-index:350;'>";  }
 strHeader += "Use dropdowns for month and year. Use table for day selection.</h2>";  cell = PTCalendar.createElement("td", row); cell.innerHTML = strHeader;  cell.id = "CalCloseHeader";  div.appendChild(table2);  div.appendChild(table); div.appendChild(table1);   var thead = PTCalendar.createElement("thead", table); var cell = null; var row = null; var cal = this; var CreateCell = function (text, cs, navtype) {
 cell = PTCalendar.createElement("td", row);  try { cell.colSpan = cs; } catch (ex) {}

 cell.PTCalendar = cal; cell.navtype = navtype; var bCreateButton = 0; var src;   cell.style.textAlign = 'center'; cell.style.width = "4px"; cell.style.height = "2px"; cell.style.fontWeight = 'bold';    if (text=="WeekHeader")
 {
 var ImageIdx = 6+cal.firstDayOfWeek; src = loadedImages[ImageIdx].src; bCreateButton = 1; }
 if(bCreateButton == 1 )
 {
 var obj = PTCalendar.createElement("img", row); obj.src = src; text = ''; cell.appendChild(obj); cell.navtype = navtype; }
 else if (bCreateButton == 0 )
 {
 cell.innerHTML = "<div unselectable='on'>" + text + "</div>"; }

 return cell; };  row = PTCalendar.createElement("tr", thead2); var title_length = 1; (this.isPopup) && --title_length; this.weekNumbers = true; (this.weekNumbers) && ++title_length; this.title = CreateCell("Title", title_length, 400);  this.title.style.fontWeight = 'bold'; if(table2.dir == 'ltr')
 this.title.style.textAlign = 'left'; else
 this.title.style.textAlign = 'right'; this.title.style.padding = "4px"; if(table2.dir == 'ltr')
 this.title.style.paddingLeft = "13px"; else
 this.title.style.paddingRight = "13px"; row = PTCalendar.createElement("tr", thead); if (this.weekNumbers) {
 cell = PTCalendar.createElement("td", row);  cell.style.textAlign = 'center'; cell.style.padding = "1px"; cell.style.color = '#fff';  }

 this.firstdayname = (this.weekNumbers) ? row.firstChild.nextSibling : row.firstChild; row = PTCalendar.createElement("tr", thead); CreateCell("",1,1);   var daystitle = new Array(); daystitle[0] = {stitle: "S", ltitle: "Sunday"}; daystitle[1] = {stitle: "M", ltitle: "Monday"}; daystitle[2] = {stitle: "T", ltitle: "Tuesday"}; daystitle[3] = {stitle: "W", ltitle: "Wednesday"}; daystitle[4] = {stitle: "T", ltitle: "Thursday"}; daystitle[5] = {stitle: "F", ltitle: "Friday"}; daystitle[6] = {stitle: "S", ltitle: "Saturday"};  var daystitle_idx = -1 + cal.firstDayOfWeek; for (var i=0; i<7; i++) {
 daystitle_idx = daystitle_idx + 1; if (daystitle_idx> 6 ) {
 daystitle_idx = -1; daystitle_idx = daystitle_idx + 1; }
 
 cell = PTCalendar.createElement("th", row); cell.setAttribute("scope","col"); cell.setAttribute("abbr", daystitle[daystitle_idx].ltitle);  var weekHeadStyle = pt_calWeekHeadstyle.substr(8,pt_calWeekHeadstyle.length-10); cell.className = weekHeadStyle; cell.style.borderTop = "1px solid #E6E6E6"; cell.style.borderBottom = "1px solid #E6E6E6"; if(daystitle_idx == 0)
 cell.style.borderLeft = "1px solid #E6E6E6"; if(daystitle_idx == 6)
 cell.style.borderRight = "1px solid #E6E6E6";    cell.align = "center"; cell.innerHTML = daystitle[daystitle_idx].stitle; }
 

 
 var tbody = PTCalendar.createElement("tbody", table); this.tbody = tbody; for (i = 6; i > 0; --i) {
 row = PTCalendar.createElement("tr", tbody); if (this.weekNumbers) {
 cell = PTCalendar.createElement("td", row); }
 var noDays = 7; for (var j = noDays; j > 0; --j) {
 cell = PTCalendar.createElement("td", row); cell.PTCalendar = this; PTCalendar._add_evs(cell); }
 }

 parent.appendChild(this.element); return this.element;};function prevMonth(step) {
 NavigateMonth(-1,step);};function nextMonth(step) {
 NavigateMonth(1,step);};function NavigateMonth(monDir,step)
{
 var cal = window._PS_popupCalendar; cal.TodayCell = null; cal.dateClicked = false; var objCnt = document.getElementsByTagName("select").length; var objMonth =null; var objYear =null; for (var i = 0; i <objCnt;i++) {
 var objSelect = document.getElementsByTagName("select")[i]; if(objSelect != null)
 {
 if(objSelect.name == 'PTMonth')
 objMonth = objSelect; else if(objSelect.name == 'PTYear')
 objYear = objSelect; }
 if(objMonth != null && objYear != null) break; }
 var date; if(cal.calType == "H")
 date = new window.HijriDate(cal.year,cal.month,cal.day); else
 date = new Date(cal.date); if(monDir==-1)
 {
 if(objMonth != null)
 {
 if(objMonth.selectedIndex>0)
 objMonth.selectedIndex = objMonth.selectedIndex-1; else
 {
 if(objYear == null || objYear.selectedIndex <= 0)
 return;  objMonth.selectedIndex = 11; objYear.selectedIndex = objYear.selectedIndex-1; }
 }

 if(step == 0)
 {
 var mon; if(cal.calType == "H")
 mon= date.month; else
 mon= date.getMonth(); if(mon == 0)
 {
 mon =11; selectMonth(mon,-1); }
 else
 selectMonth(mon - 1); }
 else
 {
 var yr,mn,day; if(cal.calType =="H")
 {
 date.day=cal.day; date.month = cal.month; date.year = cal.year; date.adjustDay(-step); cal.day = date.day; cal.month = cal.calmonth = date.month; cal.year = cal.calYear = date.year; }
 else
 {
 date = cal.date; date.setDate(date.getDate() - step); day = date.getDate(); mn = date.getMonth(); yr = date.getFullYear(); }
 cal.setDate(date); }
 }
 else
 {
 if(objMonth != null)
 {
 if(objMonth.selectedIndex<11)
 objMonth.selectedIndex = objMonth.selectedIndex+1; else
 {
 if(objYear == null || objYear.selectedIndex >= objYear.length-1)
 return; objMonth.selectedIndex = 0; objYear.selectedIndex = objYear.selectedIndex+1; }
 }
 if(step == 0)
 {
 var mon; if(cal.calType == "H")
 mon= date.month; else
 mon= date.getMonth(); if(mon == 11)
 {
 mon =0; selectMonth(mon,1); }
 else
 selectMonth(mon+1); }
 else
 {
 if(cal.calType =="H")
 {
 date.day=cal.day; date.month = cal.month; date.year = cal.year; date.adjustDay(step); cal.day = date.day; cal.month = cal.calmonth = date.month; cal.year = cal.calYear = date.year; }
 else
 {
 date = cal.date; date.setDate(date.getDate() + step); cal.calmonth = date.getMonth(); cal.calYear = date.getFullYear(); }
 cal.setDate(date); }
 }

 if (objMonth != null)
 {
 var announcer = document.getElementById("liveMonth"); if (announcer != null)
 announcer.innerHTML = objMonth.options[objMonth.selectedIndex].text; }
}


function selectMonth(Month,year) {
 var cal = window._PS_popupCalendar; if(cal.calType == "H")
 {
 var date = new window.HijriDate(cal.year,cal.month,cal.day); date.day = cal.day; var day = date.day; date.month = Month; var max = date.daysOfMonth(); if (day > max) {
 date.day=max; }
 if(year == -1)
 {
 var yr=date.year-1; date.year =yr; }
 else if(year == 1)
 {
 var yr=date.year+1; date.year =yr; }
 cal.setDate(date); }
 else
 {
 var date = new Date(cal.date); var day = date.getDate(); var max = date.getMonthDays(Month); if (day > max) {
 date.setDate(max); }
 date.setMonth(Month); var yr=date.getFullYear(); if(year == -1)
 yr--; else if(year == 1)
 yr++; date.PT_setFullYear(yr); cal.setDate(date); }
 cal.dateClicked=false; cal.callHandler();}




PTCalendar._keyEvent = function(ev) {
 var cal = window._PS_popupCalendar; if (!cal || cal.multiple)
 return false; var act = ev.type == "keydown",
 K = ev.keyCode; if (ev.ctrlKey) {
 switch (K) {
 case 33: 
 act && PTCalendar.previousYear(); break; case 34: 
 act && PTCalendar.nextYear(); break; case 36: 
 act && PTCalendar.currentDate(); break; default:
 return false; }
 } else switch (K) {
 case 27: 
 if (!browserInfoObj2.isIE && !browserInfoObj2.isSafari)
 window.bEscOnCal = true; cal.dateClicked=false; act && PTCalendar.closeWindow(); break; case 33: 
 if (ev.target.id == 'PTMonth' || ev.target.id == 'PTYear') {
 if (PTCalendar.is_firefox)
 break; else
 return false; }
 act && PTCalendar.previousMonth(); break; case 34: 
 if (ev.target.id == 'PTMonth' || ev.target.id == 'PTYear') {
 if (PTCalendar.is_firefox)
 break; else
 return false; }
 act && PTCalendar.nextMonth(); break; case 35: 
 act && PTCalendar.lastDayOfMonth(); break; case 36: 
 act && PTCalendar.firstDayOfMonth(); break; case 37: 
 case 38: 
 case 39: 
 case 40: 
 if (ev.target.id == 'PTMonth' || ev.target.id == 'PTYear') {
 if (PTCalendar.is_firefox)
 break; else
 return false; }

 if (act) {
 var prev, x, y, ne, el, step; prev = K == 37 || K == 38; step = (K == 37 || K == 39) ? 1 : 7; function setVars() {
 el = cal.currentDateEl; var p = el.pos; x = p & 15; y = p >> 4; ne = cal.ar_days[y][x]; };setVars();  while (1) {
 switch (K) {
 case 37: 
 if (--x >= 0)
 ne = cal.ar_days[y][x]; else {
 if (x==-1)
 step=1; else
 step=7; x = 6; K = 38; continue; }
 break; case 38: 
 if (--y >= 0)
 ne = cal.ar_days[y][x]; else {
 prevMonth(step); setVars(); }
 break; case 39: 
 if (++x < 7)
 ne = cal.ar_days[y][x]; else {
 x = 0; K = 40; continue; }
 break; case 40: 
 if (++y < cal.ar_days.length)
 ne = cal.ar_days[y][x]; else {
 nextMonth(7); setVars(); }
 break; }
 break; }
 if (ne) {
 
 if (!ne.disabled)
 {
 PTCalendar.cellClick(ne); if (ne.firstChild.nodeType == 1)
 ne.firstChild.focus(); }
 else 
 {
 if(K == 37 || K == 39)
 step = 1; else if(K == 38)
 step = 7; if (prev)
 prevMonth(step); else
 nextMonth(step); }
 }
 }
 break; case 13: 
 case 32: 
 if (ev.target.id == 'PTMonth' || ev.target.id == 'PTYear')
 break; if (ev.target.id == 'prevmonth') {
 PTCalendar.previousMonth(); break; }
 if (ev.target.id == 'nextmonth') {
 PTCalendar.nextMonth(); break; }
 if (ev.target.id == 'curdate') {
 if (K == 13) 
 PTCalendar.SelectToday(); break; }
 if (ev.target.id == 'PTClose') {
 if (K == 13) 
 PTCalendar.closeWindow(); break; }

 if (act) {
 if (ev.target.tagName == "a" || ev.target.tagName == "A")
 cal.currentDateEl = ev.target.parentNode; PTCalendar.cellClick(cal.currentDateEl, ev || window.event); }
 break; default:
 return false; }
 return PTCalendar.stopEvent(ev);};PTCalendar.prototype._init = function (firstDayOfWeek, date) {
 var today,TY,TM,TD,SrcDay; var year,month,mday,no_days; if(this.calType == "H")
 {
 today = new window.HijriDate(); TY = today.year; TM = today.month; TD = today.day; var srcDate = new window.HijriDate(date.year,date.month,date.day); SrcDay = srcDate.day; year = srcDate.year; month = srcDate.month; mday = srcDate.day; no_days = srcDate.daysOfMonth(); var startJul = window.HijriToJulian(year,month,1); var startGregorian = window.JulianToGregorian(startJul); this.firstDayOfMonth = startGregorian.getDay(); this.date = new window.HijriDate(year,month,mday); }
 else
 {
 today = new Date(); TY = today.getFullYear(); TM = today.getMonth(); TD = today.getDate();  SrcDay = date.getDate(); year = date.getFullYear(); var year = date.getFullYear(); if ((this.calType == "T") && (year < this.minYear)) year = year + 543;  if (year < this.minYear) {
 year = this.minYear; date.PT_setFullYear(year); } else if (year > this.maxYear) {
 year = this.maxYear; date.PT_setFullYear(year); } 
 month = date.getMonth(); mday = date.getDate(); no_days = date.getMonthDays(); this.date = new Date(date); date.setDate(1); this.firstDayOfMonth = date.getDay(); }
 
 this.table.style.visibility = "hidden"; this.firstDayOfWeek = firstDayOfWeek; var day1 = (this.firstDayOfMonth - this.firstDayOfWeek) % 7; var currentDate = 1; if (day1 < 0)
 day1 += 7; var row = this.tbody.firstChild; var ar_days = this.ar_days = new Array(); var dates = this.multiple ? (this.datesCells = {}) : null; for (var i = 0; i < 6; ++i, row = row.nextSibling) {
 var cell = row.firstChild; cell.style.backgroundImage = ""; if (this.weekNumbers) {
 cell.style.width="1.6em"; cell.style.textAlign = 'left'; cell.style.paddingTop = "1px"; cell.style.paddingRight = "2px"; cell.style.paddingBottom = "1px"; cell.style.paddingLeft = "1px"; cell = cell.nextSibling; }

 var hasdays = false, iday, dpos = ar_days[i] = []; for (var j = 0; j < 7; ++j, cell = cell.nextSibling) {
 if(this.calType =="H")
 if(currentDate> 31) break; var sBorderCls=""; cell.style.fontFamily = 'Arial, sans-serif'; cell.style.width="19"; cell.style.height="19"; cell.style.color = '#000'; cell.style.textAlign = 'center'; cell.style.paddingTop = "2px"; cell.style.paddingRight = "3px"; cell.style.paddingBottom = "3px"; cell.style.paddingLeft = "2px"; cell.style.fontWeight ="normal"; cell.style.cursor='pointer'; if(PTCalendar.is_khtml == true)
 {
 cell.style.paddingRight = "4px"; cell.style.paddingBottom = "2px"; }
 if(i==0 && j<7)
 {
 cell.style.borderTop = "0px"; cell.style.borderBottom = "0px"; cell.style.borderLeft = "0px"; cell.style.borderRight = "0px"; cell.style.borderStyle ="solid"; cell.style.borderColor ="#E6E6E6"; }
 if(j==0)
 {
 if(i!=0)
 cell.style.borderTop = "0px"; else
 cell.style.borderTop = "0px"; cell.style.borderBottom = "0px"; if(this.table.dir == 'ltr')
 {
 cell.style.borderLeft = "1px"; cell.style.borderRight = "0px"; }
 else
 {
 cell.style.borderLeft = "0px"; cell.style.borderRight = "1px"; }

 cell.style.borderStyle ="solid"; cell.style.borderColor ="#E6E6E6"; }


 if(j>0 && j%6==0)
 {
 cell.style.borderBottom = "0px"; if(i!=0)
 cell.style.borderTop = "0px"; else
 cell.style.borderTop = "0px"; if(this.table.dir == 'ltr')
 {
 cell.style.borderLeft = "0px"; cell.style.borderRight = "1px"; }
 else
 {
 cell.style.borderLeft = "1px"; cell.style.borderRight = "0px"; }
 cell.style.borderStyle ="solid"; cell.style.borderColor ="#E6E6E6"; }


 if(i==5&& j<7)
 {
 cell.style.borderTop = "0px"; cell.style.borderBottom = "1px"; if(j!=0) {
 if(this.table.dir == 'ltr') 
 cell.style.borderLeft = "0px";  else 
 cell.style.borderRight = "0px"; }
 else {
 if(this.table.dir == 'ltr') 
 cell.style.borderLeft = "1px";  else 
 cell.style.borderRight = "1px"; }
 if(j>0 && j%6==0) {
 if(this.table.dir == 'ltr')
 cell.style.borderRight = "1px"; else
 cell.style.borderLeft = "1px"; }
 else {
 if(this.table.dir == 'ltr')
 cell.style.borderRight = "0px"; else
 cell.style.borderLeft = "0px"; }
 cell.style.borderStyle ="solid"; cell.style.borderColor ="#E6E6E6"; }
 cell.pos = i << 4 | j; dpos[j] = cell; var current_month = true; if(day1>0)
 {
 current_month = false; day1--; }
 if (!current_month) {
 
 cell.style.backgroundImage = ""; cell.style.fontFamily = "Arial, sans-serif"; cell.style.width="19px"; cell.style.height="19px"; cell.style.color = "#000000"; cell.style.textAlign = "center"; cell.style.paddingTop = "2px"; cell.style.paddingRight = "3px"; cell.style.paddingBottom = "3px"; cell.style.paddingLeft = "2px"; cell.innerHTML = "&nbsp;"; cell.disabled = true;  cell.style.cursor='default'; continue;  } else {
 cell.otherMonth = false; hasdays = true; }
 cell.disabled = false; if(currentDate>no_days)
 {
 cell.style.backgroundImage = ""; cell.style.fontFamily = "Arial, sans-serif"; cell.style.width="19px"; cell.style.height="19px"; cell.style.color = "#000000"; cell.style.textAlign = "center"; cell.style.paddingTop = "2px"; cell.style.paddingRight = "3px"; cell.style.paddingBottom = "3px"; cell.style.paddingLeft = "2px"; cell.innerHTML = "&nbsp;"; cell.disabled = true; cell.style.cursor='default'; continue; }
 
 cell.innerHTML = "<a style = 'color:black;text-decoration:none;' tabindex='-1'>" + currentDate + "</a>";  cell.className+=sBorderCls; cell.style.backgroundImage = ""; if(j>=7)
 {
 cell.style.fontFamily = "Arial, sans-serif"; cell.style.width="19px"; cell.style.height="19px"; cell.style.color = "#000000"; cell.style.textAlign = "center"; cell.style.paddingTop = "2px"; cell.style.paddingRight = "3px"; cell.style.paddingBottom = "3px"; cell.style.paddingLeft = "2px"; cell.style.background = ""; cell.innerHTML = "&nbsp;"; cell.disabled = true; cell.style.cursor='default'; continue; }
 if (!cell.disabled) {
 cell.calday = currentDate;  if(this.calType == "H")
 {
 cell.calMonth = date.month; cell.calYear = date.year;  }
 else
 {
 cell.calMonth = date.getMonth(); cell.calYear = date.getFullYear();  }
 if (!this.multiple && current_month
 && currentDate == mday && this.hiliteToday) {
 this.currentDateEl = cell; }
 if(currentDate == SrcDay &&
 cell.calMonth == month &&
 cell.calYear == year)
 {
 this.CellSel = cell; this.CellSel.firstChild.setAttribute("tabindex", 0); this.day = currentDate; this.month = month; this.year = year; cell.style.backgroundImage = "url('"+loadedImages[2].src+"')"; cell.style.backgroundRepeat = "no-repeat"; cell.style.backgroundPosition = "center";  cell.style.fontWeight = 'bold'; }

 if (currentDate == TD &&
 cell.calMonth == TM &&
 cell.calYear == TY) {
 this.TodayCell = cell;  cell.style.width="19"; cell.style.height="19"; cell.style.color = '#000'; cell.style.textAlign = 'center'; cell.style.padding = "1px"; cell.style.backgroundImage = "url('"+loadedImages[1].src+"')"; cell.style.backgroundRepeat = "no-repeat"; cell.style.backgroundPosition = "center";  if(TD == SrcDay)
 {
 if( PTCalendar.is_ie == false)
 {
 cell.style.backgroundImage = "url('"+loadedImages[1].src+"')"; cell.style.textAlign = 'center'; cell.style.backgroundRepeat = "no-repeat"; if(currentDate<10)
 cell.innerHTML ="<a style='font-weight:bold;background:url("+loadedImages[2].src+"); text-decoration:none;color:black;width:19;height:19;padding: 1px 5px;' onclick = 'javascript:PTCalendar.HandleInnercell();' tabindex='0'>"+currentDate+"</a>"; else
 cell.innerHTML ="<a style='font-weight:bold;background:url("+loadedImages[2].src+"); text-decoration:none;color:black;width:19;height:19;padding: 1px 1px 1px 2px;' onclick = 'javascript:PTCalendar.HandleInnercell();' tabindex='0'>"+currentDate+"</a>"; }
 else
 {
 cell.style.backgroundImage = "url('"+loadedImages[2].src+"')"; cell.innerHTML ="<a style='font-weight:bold;background:url("+loadedImages[1].src+");text-align: center; text-decoration:none;color:black;width:19;height:19;'onclick = 'javascript:PTCalendar.HandleInnercell();' tabindex='0'>"+currentDate+"</a>"; }
 }
 else
 cell.innerHTML ="<a style='font-weight:bold;text-align: center; text-decoration:none;color:black;width:19;height:19;' onclick = 'javascript:PTCalendar.HandleInnercell();' tabindex='-1'>"+currentDate+"</a>"; this.TodayCell = cell;  }
 currentDate++; }
 }
 if (!(hasdays || this.showsOtherMonths))
 row.className = "PT_CALemptyrow"; }
 this.table.style.visibility = "visible"; };PTCalendar.prototype.setDate = function (date) {
 this._init(this.firstDayOfWeek, date);};PTCalendar.prototype.setCalendarTye = function (calType) {
 this.calType = calType;}


PTCalendar.prototype.setFirstDayOfWeek = function (firstDayOfWeek) {
 this._init(firstDayOfWeek, this.date); var nCurMonth; var nCurYr; var nStartYear = 1900; var nEndYear = 2100; var nDay=0; var strMonth; var strMonthName; if(this.calType=="H")
 {
 nCurMonth = this.date.month; nCurYr = this.date.year; nStartYear = 1321; nEndYear = 1521; strMonth= "<select aria-label="+'Month'+" style = 'width:130px;' name = 'PTMonth' id = 'PTMonth' onChange =PTCalendar.MonthChanged() class='PTCALMONTH'>" ; strMonth = strMonth + "<option value='0'>"+ 'Muharram'+ "</option>" ; strMonth = strMonth + "<option value='10'>"+ 'Safar' + "</option>" ; strMonth = strMonth + "<option value='1'>"+ 'Rabi Al-Awwal' + "</option>" ; strMonth = strMonth + "<option value='2'>"+ 'Rabi Al-Akhar' + "</option>" ; strMonth = strMonth + "<option value='3'>"+ 'Jumada Al-Awwal' + "</option>" ; strMonth = strMonth + "<option value='4'>"+ 'Jumada Al-Akhirah' + "</option>" ; strMonth = strMonth + "<option value='5'>"+ 'Rajab' + "</option>" ; strMonth = strMonth + "<option value='6'>"+ 'Shaban' + "</option>" ; strMonth = strMonth + "<option value='7'>"+ 'Ramadan' + "</option>" ; strMonth = strMonth + "<option value='8'>"+ 'Shawwal' + "</option>" ; strMonth = strMonth + "<option value='9'>"+ 'Dhul-Qadah' + "</option>" ; strMonth = strMonth + "<option value='11'>"+ 'Dhul-Hijjah' + "</option>" ; }
 else
 {
 nCurMonth = this.date.getMonth(); nCurYr = this.date.getFullYear(); if (this.calType=="T")
 {
 nCurYr = nCurYr + 543; nStartYear = 2443; nEndYear = 2644; } 
 strMonth= "&nbsp;&nbsp;&nbsp;<select aria-label="+'Month'+" name = 'PTMonth' id = 'PTMonth' onChange =PTCalendar.MonthChanged() class='PTCALMONTH'>" ; strMonth = strMonth + "<option value='0'>"+ 'January' + "</option>" ; strMonth = strMonth + "<option value='1'>"+ 'February' + "</option>" ; strMonth = strMonth + "<option value='2'>"+ 'March' + "</option>" ; strMonth = strMonth + "<option value='3'>"+ 'April' + "</option>" ; strMonth = strMonth + "<option value='4'>"+ 'May' + "</option>" ; strMonth = strMonth + "<option value='5'>"+ 'June' + "</option>" ; strMonth = strMonth + "<option value='6'>"+ 'July' + "</option>" ; strMonth = strMonth + "<option value='7'>"+ 'August' + "</option>" ; strMonth = strMonth + "<option value='8'>"+ 'September' + "</option>" ; strMonth = strMonth + "<option value='9'>"+ 'October' + "</option>" ; strMonth = strMonth + "<option value='10'>"+ 'November' + "</option>" ; strMonth = strMonth + "<option value='11'>"+ 'December' + "</option>" ;  } 

 strMonth = strMonth + "</select>"; var strYr = " <select aria-label="+'Year'+" name = 'PTYear' id = 'PTYear' onChange = PTCalendar.YearChanged() class='PTCALMONTH' style='width: 75px;'>" ; for (var nYr = nStartYear; nYr <= nEndYear; ++nYr)
 strYr = strYr + "<option>" + nYr + "</option>" ; if(nCurYr >= nStartYear) nCurYr -=nStartYear; this.title.innerHTML = strMonth + "&nbsp;" + strYr; this._selectCombos(); this.monthsCombo.selectedIndex = nCurMonth; this.yearsCombo.selectedIndex = nCurYr; this.minYear = nStartYear; this.maxYear = nEndYear; };PTCalendar.prototype.setRange = function (a, z) {
 this.minYear = a; this.maxYear = z;};PTCalendar.prototype.callHandler = function () {
 if (this.onSelected) {
 this.onSelected(this, this.date); }
};PTCalendar.prototype.callCloseHandler = function () {
 if (this.onClose) {
 this.onClose(this); closeCalendar = true; }
};PTCalendar.prototype.destroy = function () {
 if (this.isPopup)
 PTCalendar.removeEvent(document, "keydown", PTCalendar._keyEvent); var el = this.element.parentNode; if (typeof el != "undefined" && el != null) 
 el.removeChild(this.element); PTCalendar._C = null; window._PS_popupCalendar = null;};PTCalendar.prototype.show = function () {
 var rows = this.table.getElementsByTagName("tr"); for (var i = rows.length; i > 0;) {
 var row = rows[--i]; PTCalendar.removeClass(row, "rowhilite"); var cells = row.getElementsByTagName("td"); for (var j = cells.length; j > 0;) {
 var cell = cells[--j]; PTCalendar.removeClass(cell, "hilite"); PTCalendar.removeClass(cell, "active"); }
 }
 this.element.style.display = "block"; this.hidden = false; if (this.isPopup) {
 window._PS_popupCalendar = this; PTCalendar.addEvent(document, "keydown", PTCalendar._keyEvent); }
 
};PTCalendar.prototype.hide = function () {
 if (this.isPopup)
 PTCalendar.removeEvent(document, "keydown", PTCalendar._keyEvent);  this.element.style.display = "none"; this.hidden = true;  this.title.innerHTML="";};PTCalendar.prototype.showAt = function (x, y) {
 var s = this.element.style; if (x < 3 || isFModeLayout()) x = 3;  if (y < 3 || isFModeLayout()) y = 3; s.left = x + "px"; s.top = y + "px"; this.show();};PTCalendar.prototype.showAtElement = function (el, opts) {
 var self = this; var p = PTCalendar.getAbsolutePos(el); this.datePromptName = el.id; if (!opts || typeof opts != "string") {
 this.showAt(p.x, p.y + el.offsetHeight); return true; }
 function fixPosition(box) {
 if (box.x < 0)
 box.x = 0; if (box.y < 0)
 box.y = 0; var cp = document.createElement("div"); var s = cp.style; s.position = "absolute"; s.display = "block"; s.right = s.bottom = s.width = s.height = "0px"; document.body.appendChild(cp); var br = PTCalendar.getAbsolutePos(cp); document.body.removeChild(cp); if (PTCalendar.is_ie) {
 br.y += ((document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop); br.x += ((document.documentElement && document.documentElement.scrollLeft) || document.body.scrollLeft); } else {
 br.y += window.scrollY; br.x += window.scrollX; }
 var tmp = box.x + box.width - br.x; if (tmp > 0) box.x -= tmp; tmp = box.y + box.height - br.y; if (tmp > 0) box.y -= tmp; }; this.element.style.display = "block"; PTCalendar.continuation_for_the_khtml_browser = function() {
 var w = self.element.offsetWidth; var h = self.element.offsetHeight; self.element.style.display = "none"; var valign = opts.substr(0, 1); var halign = "l"; if (opts.length > 1) {
 halign = opts.substr(1, 1); }
 
 switch (valign) {
 case "T": p.y -= h; break; case "B": p.y += el.offsetHeight; break; case "C": p.y += (el.offsetHeight - h) / 2; break; case "t": p.y += el.offsetHeight - h; break; case "b": break;  }
 
 switch (halign) {
 case "L": p.x -= w; break; case "R": p.x += el.offsetWidth; break; case "C": p.x += (el.offsetWidth - w) / 2; break; case "l": p.x += el.offsetWidth - w; break; case "r": break;  }
 p.width = w+50; p.height = h + 40;  fixPosition(p); self.showAt(p.x, p.y); }; if (this.is_khtml)
 setTimeout("PTCalendar.continuation_for_the_khtml_browser()", 10); else
 PTCalendar.continuation_for_the_khtml_browser();};PTCalendar.prototype.setDateFormat = function (str) {
 this.dateFormat = str;};PTCalendar.prototype.setTtDateFormat = function (str) {
 this.ttDateFormat = str;};PTCalendar.prototype.parseDate = function(str, fmt) {
 if (!fmt)
 fmt = this.dateFormat;  if(this.calType == "H")
 {
 if(str==null || str == "")
 {
 date = new HijriDate(); }
 else
 {
 date = str; }
 }
 else
 {
 if(str==null || str == "")
 {
 date = new Date(); }
 else
 {
 date = str; }
 }
 this.setDate(date);};PTCalendar.prototype._displayWeekdays = function () {
 return;};PTCalendar.prototype._hideCombos = function () {
 this.monthsCombo.style.display = "none"; this.yearsCombo.style.display = "none";};PTCalendar.prototype._selectCombos = function (monthIndex) {
 var objCnt = document.getElementsByTagName("select").length; var objMonth =null; var objYear =null; for (var i = 0; i <objCnt;i++) 
 {
 var objSelect = document.getElementsByTagName("select")[i]; if(objSelect != null)
 {
 if(objSelect.name == 'PTMonth')
 objMonth = objSelect; else if(objSelect.name == 'PTYear')
 objYear = objSelect; }
 if(objMonth != null && objYear != null) 
 break; }
 if(objMonth != null)
 this.monthsCombo = objMonth; if(objYear != null)
 this.yearsCombo = objYear;}




Date._MD = new Array(31,28,31,30,31,30,31,31,30,31,30,31);Date.SECOND = 1000 ;Date.MINUTE = 60 * Date.SECOND;Date.HOUR = 60 * Date.MINUTE;Date.DAY = 24 * Date.HOUR;Date.WEEK = 7 * Date.DAY;Date.parseDate = function(str, fmt) {
 var today = new Date(); var y = 0; var m = -1; var d = 0; var a = str.split(/\W+/); var b = fmt.match(/%./g); var i = 0, j = 0; var hr = 0; var min = 0; for (i = 0; i < a.length; ++i) {
 if (!a[i])
 continue; switch (b[i]) {
 case "%d":
 case "%e":
 d = parseInt(a[i], 10); break; case "%m":
 m = parseInt(a[i], 10) - 1; break; case "%Y":
 case "%y":
 y = parseInt(a[i], 10); (y < 100) && (y += (y > 29) ? 1900 : 2000); break; case "%b":
 case "%B":
 for (j = 0; j < 12; ++j) {
 
 }
 break; case "%H":
 case "%I":
 case "%k":
 case "%l":
 hr = parseInt(a[i], 10); break; case "%P":
 case "%p":
 if (/pm/i.test(a[i]) && hr < 12)
 hr += 12; else if (/am/i.test(a[i]) && hr >= 12)
 hr -= 12; break; case "%M":
 min = parseInt(a[i], 10); break; }
 }
 if (isNaN(y)) y = today.getFullYear(); if (isNaN(m)) m = today.getMonth(); if (isNaN(d)) d = today.getDate(); if (isNaN(hr)) hr = today.getHours(); if (isNaN(min)) min = today.getMinutes(); if (y != 0 && m != -1 && d != 0)
 return new Date(y, m, d, hr, min, 0); y = 0; m = -1; d = 0; for (i = 0; i < a.length; ++i) {
 if (a[i].search(/[a-zA-Z]+/) != -1) {
 var t = -1; for (j = 0; j < 12; ++j) {
 
 }
 if (t != -1) {
 if (m != -1) {
 d = m+1; }
 m = t; }
 } else if (parseInt(a[i], 10) <= 12 && m == -1) {
 m = a[i]-1; } else if (parseInt(a[i], 10) > 31 && y == 0) {
 y = parseInt(a[i], 10); (y < 100) && (y += (y > 29) ? 1900 : 2000); } else if (d == 0) {
 d = a[i]; }
 }
 if (y == 0)
 y = today.getFullYear(); if (m != -1 && d != 0)
 return new Date(y, m, d, hr, min, 0); return today;};Date.prototype.getMonthDays = function(month) {
 var year = this.getFullYear(); if (typeof month == "undefined") {
 month = this.getMonth(); }
 if (((0 == (year%4)) && ( (0 != (year%100)) || (0 == (year%400)))) && month == 1) {
 return 29; } else {
 return Date._MD[month]; }
};Date.prototype.getDayOfYear = function() {
 var now = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0); var then = new Date(this.getFullYear(), 0, 0, 0, 0, 0); var time = now - then; return Math.floor(time / Date.DAY);};Date.prototype.getWeekNumber = function() {
 var d = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0); var DoW = d.getDay(); d.setDate(d.getDate() - (DoW + 6) % 7 + 3);  var ms = d.valueOf();  d.setMonth(0); d.setDate(4);  return Math.round((ms - d.valueOf()) / (7 * 864e5)) + 1;};Date.prototype.equalsTo = function(date) {
 return ((this.getFullYear() == date.getFullYear()) &&
 (this.getMonth() == date.getMonth()) &&
 (this.getDate() == date.getDate()) &&
 (this.getHours() == date.getHours()) &&
 (this.getMinutes() == date.getMinutes()));};Date.prototype.setDateOnly = function(day,month,Year) {
 this.setDate(1); this.PT_setFullYear(Year); this.setMonth(month); this.setDate(day); };if ( !Date.prototype.__msh_oldSetFullYear ) {
Date.prototype.__msh_oldSetFullYear = Date.prototype.setFullYear;}
Date.prototype.PT_setFullYear = function(y) {
 var d = new Date(this); d.__msh_oldSetFullYear(y); if (d.getMonth() != this.getMonth())
 this.setDate(28); this.__msh_oldSetFullYear(y); };}